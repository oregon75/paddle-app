// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DISCIPLINER
  DISCIPLINEE
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum DisciplinerRole {
  DAD
  SERGEANT
  JUDGE
}

model User {
  id                 String   @id @default(cuid())
  name               String
  email              String   @unique
  password           String
  role               Role     @default(DISCIPLINEE)
  disciplinerRole    DisciplinerRole?
  points             Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  discipliner        User?    @relation("DisciplinerToDisciplinee", fields: [disciplinerId], references: [id])
  disciplinerId      String?
  disciplinees       User[]   @relation("DisciplinerToDisciplinee")
  tasks              Task[]
  underwearAssignments UnderwearAssignment[]
  chastityAssignments ChastityAssignment[]
  progressEntries    ProgressEntry[]
  rewards            Reward[]
  punishments        Punishment[]
  goals              Goal[]
}

model Task {
  id            String   @id @default(cuid())
  title         String
  description   String?
  status        TaskStatus @default(PENDING)
  intensity     Int      @default(1)
  isEnabled     Boolean  @default(true)
  dueDate       DateTime?
  completionDate DateTime?
  sortOrder     Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        String
}

model UnderwearAssignment {
  id        String   @id @default(cuid())
  date      DateTime
  underwear String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model ChastityAssignment {
  id             String   @id @default(cuid())
  startDate      DateTime
  endDate        DateTime
  isTimerVisible Boolean
  user           User     @relation(fields: [userId], references: [id])
  userId         String
}

model ProgressEntry {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  note      String
  rating    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Reward {
  id          String   @id @default(cuid())
  name        String
  description String?
  points      Int
  isRedeemed  Boolean  @default(false)
  createdAt   DateTime @default(now())
  redeemedAt  DateTime?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Punishment {
  id          String   @id @default(cuid())
  name        String
  description String?
  severity    Int
  isCompleted Boolean  @default(false)
  assignedAt  DateTime @default(now())
  completedAt DateTime?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Goal {
  id          String   @id @default(cuid())
  name        String
  description String?
  targetDate  DateTime?
  isAchieved  Boolean  @default(false)
  createdAt   DateTime @default(now())
  achievedAt  DateTime?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model DisciplinerImplement {
  id    String   @id @default(cuid())
  name  String
  role  DisciplinerRole
}